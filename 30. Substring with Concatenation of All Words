You are given a string s and an array of strings words. All the strings of words are of the same length.

A concatenated string is a string that exactly contains all the strings of any permutation of words concatenated.

For example, if words = ["ab","cd","ef"], then "abcdef", "abefcd", "cdabef", "cdefab", "efabcd", and "efcdab" are all concatenated strings. "acdbef" is not a concatenated string because it is not the concatenation of any permutation of words.
Return an array of the starting indices of all the concatenated substrings in s. You can return the answer in any order.

 

Example 1:

Input: s = "barfoothefoobarman", words = ["foo","bar"]

Output: [0,9]

Explanation:

The substring starting at 0 is "barfoo". It is the concatenation of ["bar","foo"] which is a permutation of words.
The substring starting at 9 is "foobar". It is the concatenation of ["foo","bar"] which is a permutation of words.

Example 2:

Input: s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]

Output: []

Explanation:

There is no concatenated substring.

Example 3:

Input: s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]

Output: [6,9,12]

Explanation:

The substring starting at 6 is "foobarthe". It is the concatenation of ["foo","bar","the"].
The substring starting at 9 is "barthefoo". It is the concatenation of ["bar","the","foo"].
The substring starting at 12 is "thefoobar". It is the concatenation of ["the","foo","bar"].

 

Constraints:

1 <= s.length <= 104
1 <= words.length <= 5000
1 <= words[i].length <= 30
s and words[i] consist of lowercase English letters.



=============================================================================================================================================================================================

Solution:- 

# Python

class Solution:
    def findSubstring(self, s: str, words: List[str]) -> List[int]:
        n = len(s)
        k = len(words[0])
        m = len(words)*k
        if m > n: return []

        from collections import Counter
        wordsHash = Counter(words)
        
        # define a function to return all indices with offset i
        def slide_window_with_offset(i):
            loc_ans, seen, left = [], Counter(), offset
            for right in range(offset, n - k + 1, k):
                sub = s[right:right + k]
                if sub not in wordsHash:
                    seen.clear()
                    left = right + k # we move the left pointer
                else:
                    seen[sub] += 1
                    # shrink from left if a word is found to be over-used (iteratively until not)
                    while seen[sub] > wordsHash[sub]:
                        seen[s[left:left + k]] -= 1
                        left += k
                    # record if matched 
                    ## (length matching is good enough, since no wordsHash violation so far)
                    if right - left + k == m:
                        loc_ans.append(left)
                    # once done we keep expanding the right pointer for the next sub
            return loc_ans

        # for the final answer
        ans = []
        for offset in range(k):
            # for all possible offset (k of them in total)
            ans += slide_window_with_offset(offset)
        return ans
